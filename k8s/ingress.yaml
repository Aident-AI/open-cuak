apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: browserless-http-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    # Define a static IP for HTTP ingress
    kubernetes.io/ingress.class: "nginx"
    service.beta.kubernetes.io/azure-load-balancer-resource-group: "${AZURE_RESOURCE_GROUP}"
    service.beta.kubernetes.io/azure-pip-name: "${AZURE_HTTP_INGRESS_IP_NAME}"
    # Add sticky session support
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "browserless_http_affinity"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ${AZURE_DOMAIN_NAME}
      secretName: tls-secret-browserless-http
  rules:
    # HTTP service on main domain
    - host: ${AZURE_DOMAIN_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${AZURE_BROWSERLESS_SERVICE_NAME}
                port:
                  number: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: browserless-ws-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # Increased timeouts for WebSockets (reduced from 3600 to avoid stale connections)
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    # Critical WebSocket settings
    nginx.ingress.kubernetes.io/websocket-services: "${AZURE_BROWSERLESS_SERVICE_NAME}"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    # Additional WebSocket specific settings
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    # Define a static IP for WebSocket ingress
    kubernetes.io/ingress.class: "nginx"
    service.beta.kubernetes.io/azure-load-balancer-resource-group: "${AZURE_RESOURCE_GROUP}"
    service.beta.kubernetes.io/azure-pip-name: "${AZURE_WS_INGRESS_IP_NAME}"
    # Add sticky session support
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "browserless_ws_affinity"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ws.${AZURE_DOMAIN_NAME}
      secretName: tls-secret-browserless-ws
  rules:
    # WebSocket service on ws subdomain
    - host: ws.${AZURE_DOMAIN_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ${AZURE_BROWSERLESS_SERVICE_NAME}
                port:
                  number: 50000
